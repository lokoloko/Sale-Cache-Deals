// src/components/ui/button.tsx
// This is a reusable Button component, likely adapted from the ShadCN UI library.
// It uses class-variance-authority (cva) for different button styles and sizes,
// and Radix UI's Slot component for composability.

import * as React from "react"
import { Slot } from "@radix-ui/react-slot" // Allows wrapping child components while passing props.
import { cva, type VariantProps } from "class-variance-authority" // For creating variant-driven class names.

import { cn } from "@/lib/utils" // Utility for merging Tailwind classes.

// --- Button Variants Definition ---
// `cva` defines base styles and variants (visual style, size).
// üîç These variants define the appearance and behavior of the button.
const buttonVariants = cva(
  // Base classes applied to all buttons.
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      // `variant` defines the button's visual style (e.g., primary, destructive, outline).
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      // `size` defines the button's padding and height.
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10", // For icon-only buttons.
      },
    },
    // Default variants applied if not specified.
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

// --- Button Props Interface ---
/**
 * @interface ButtonProps
 * @description Extends standard HTML button attributes and adds `cva` variants and `asChild` prop.
 * @property {boolean} [asChild=false] - If true, renders the child component and passes props to it, instead of rendering a <button>.
 */
export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean // Allows the button to act as a wrapper for its child (e.g., a Link).
}

// --- Button Component ---
/**
 * @component Button
 * @description A highly reusable button component with multiple visual styles and sizes.
 * It can act as a standard HTML button or wrap a child component (e.g., Next.js Link) using `asChild`.
 * This is a foundational UI element.
 */
const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    // Determine if the component should render as a <Slot> (wrapping its child) or a <button>.
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        // Apply Tailwind classes generated by `buttonVariants` along with any custom `className`.
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref} // Forward the ref to the underlying element.
        {...props} // Spread remaining props.
      />
    )
  }
)
Button.displayName = "Button" // For better debugging.

export { Button, buttonVariants }
